def solve(length):
    """
    2 x n 크기의 직사각형을 2 x 1, 1 x 2, 1 x 1 타일로 채우는 방법의 수를 구하는 문제
    DP 테이블을 두개 설정하여, 각각의 점화식을 구한다.
    이때 각각의 점화식은 다음과 같다.
    DP1[i] = DP1[i - 1] + DP1[i - 2] + 2 * DP2[i - 2]
    DP2[i] = DP1[i - 2] + DP2[i - 1]
    DP1[i]는 길이 i인 판을 I자와 L자 도미노로 채우는 경우의 수를 나타낸다.
    DP2[i]는 길이 i인 판을 채우되, 가장 우측의 도미노가 L자 도미노의 수직 부분이 되는 경우의 수를 나태낸다.
    :param length: 직사각형의 길이
    :return: 2 x n 크기의 직사각형을 2 x 1, 1 x 2, 1 x 1 타일로 채우는 방법의 수
    """
    # DP 테이블 설정
    dp1 = [0] * (length + 1)
    dp2 = [0] * (length + 1)

    # 초기값 설정
    # dp1[0] 길이가 0인 판을 채우는 경우는 비어 있는 상태(공집합)이므로 경우의 수가 1가지이다.
    # dp1[1] 길이가 1인 판을 채우는 경우는 I자 도미노를 세로로 배치하는 경우만 존재하므로 경우의 수가 1가지이다.
    # dp2[0] 길이가 0인 판에 L자 도미노의 수직 부분이 오른쪽에 위치하는 경우는 존재하지 않는다.
    # dp2[1] 길이가 1인 판에 L자 도미노의 수직 부분이 오른쪽에 위치하는 경우는 L자 도미노를 세로로 배치하는 경우뿐이므로 경우의 수가 1가지이다.
    dp1[0] = 1
    dp1[1] = 1
    dp2[0] = 0
    dp2[1] = 1

    # DP 점화식
    # 이미 초기값을 설정했으므로, 2부터 length까지 반복하여 점화식을 적용한다.
    for i in range(2, length + 1):
        dp1[i] = dp1[i - 1] + dp1[i - 2] + 2 * dp2[i - 2]
        dp2[i] = dp1[i - 2] + dp2[i - 1]
    return dp1[length]


# Test Drive
n = int(input())
result = solve(n)
print(result)
